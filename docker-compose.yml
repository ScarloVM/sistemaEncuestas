version: '3'

services:
  app:
    build: .
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: sistemaencuestas
      DB_USER: postgres
      DB_PASSWORD: mysecretpassword
      MONGO_URL: mongodb://mongo:27017
      MONGO_NAME : sistemaEncuestas
      REDIS_HOST: cache
      REDIS_PORT: 6379
    ports:
      - 3000:3000
    networks:
      - web
    depends_on:
      - db
      - cache
    volumes:
      - .:/usr/src/app
    command: npm start
  

  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    networks:
      - web
    volumes:
      - ./database/:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432
    
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@tech.com
      PGADMIN_DEFAULT_PASSWORD: 1234
    ports:
      - 5050:80
    networks:
      - web

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: sistemaEncuestas
    networks:
      - web
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    networks:
      - web
    depends_on:
      - mongo
  
  cache:
    image: redis:latest
    restart: always
    volumes:
      - "./.data:/data"
    ports:
      - '6379:6379'
    networks:
      - web

  streamlit_app:
    build:
      context: ./streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit:/app
    networks:
      - web
    
  zoo1:     
    image: confluentinc/cp-zookeeper:7.3.2     
    hostname: zoo1     
    container_name: zoo1     
    ports:       
    - "2181:2181"     
    environment:       
      ZOOKEEPER_CLIENT_PORT: 2181       
      ZOOKEEPER_SERVER_ID: 1       
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo1

  kafdrop:
    platform: linux/amd64
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:19092"
    depends_on:
      - kafka1

  spark:
      image: bitnami/spark:latest
      environment:
        - SPARK_MODE=master
      ports:
        - "7077:7077"
        - "8080:8080"
      networks:
        - web

networks:
  web:
    driver: bridge

