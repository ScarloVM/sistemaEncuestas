version: '3'

services:
  app:
    build: .
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: sistemaencuestas
      DB_USER: postgres
      DB_PASSWORD: mysecretpassword
      MONGO_URL: mongodb://mongo:27017
      MONGO_NAME : sistemaEncuestas
      REDIS_HOST: cache
      REDIS_PORT: 6379
    ports:
      - 3000:3000
    networks:
      - web
    depends_on:
      - db
      - cache
      # - neo4j
      - kafka1
    volumes:
      - .:/usr/src/app
    command: npm start
  
  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    networks:
      - web
    volumes:
      - ./database/:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432
    
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@tech.com
      PGADMIN_DEFAULT_PASSWORD: 1234
    ports:
      - 5050:80
    networks:
      - web

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: sistemaEncuestas
    networks:
      - web
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    networks:
      - web
    depends_on:
      - mongo
  
  cache:
    image: redis:latest
    restart: always
    volumes:
      - "./.data:/data"
    ports:
      - '6379:6379'
    networks:
      - web

  streamlit_app:
    build:
      context: ./streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit:/app
    networks:
      - web

  zookeeper:
    platform: linux/amd64
    image: zookeeper:3.4.9
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog
    networks:
      - web
      
  kafka1:
    platform: linux/amd64
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka1
    ports:
      - "9091:9091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-172.0.0.1}:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
    volumes:
      - ./data/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - web

  kafka2:
    platform: linux/amd64
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka2
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-172.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 2
    volumes:
      - ./data/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - web


  kafka3:
    platform: linux/amd64
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka3
    ports:
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-172.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 3
    volumes:
      - ./data/kafka3/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - web

  kafdrop:
    platform: linux/amd64
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:19091"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - web

  neo4j:
    image: neo4j:latest
    restart: always
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      NEO4J_AUTH: neo4j/strongpassword123
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
      - ./neo4j/import:/var/lib/neo4j/import
      - ./neo4j/plugins:/plugins
    networks:
      - web

  spark:
      image: bitnami/spark:latest
      environment:
        - SPARK_MODE=master
      ports:
        - "7077:7077"
        - "8080:8080"
      networks:
        - web

  spark-worker:
      image: bitnami/spark:latest
      environment:
        - SPARK_MODE=worker
        - SPARK_MASTER_URL=spark://spark:7077
      networks:
        - web
      depends_on:
        - spark
  

    
networks:
  web:
    driver: bridge
