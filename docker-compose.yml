version: '3'

services:
  app:
    build: .
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: sistemaencuestas
      DB_USER: postgres
      DB_PASSWORD: mysecretpassword
      MONGO_URL: mongodb://mongo:27017
      MONGO_NAME : sistemaEncuestas
      REDIS_HOST: cache
      REDIS_PORT: 6379
    ports:
      - 3000:3000
    networks:
      - web
    depends_on:
      - db
      - cache
      - neo4j
    volumes:
      - .:/usr/src/app
    command: npm start
  
  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    networks:
      - web
    volumes:
      - ./database/:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432
    
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@tech.com
      PGADMIN_DEFAULT_PASSWORD: 1234
    ports:
      - 5050:80
    networks:
      - web

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: sistemaEncuestas
    networks:
      - web
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    networks:
      - web
    depends_on:
      - mongo
  
  cache:
    image: redis:latest
    restart: always
    volumes:
      - "./.data:/data"
    ports:
      - '6379:6379'
    networks:
      - web

  streamlit_app:
    build:
      context: ./streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./streamlit:/app
    networks:
      - web

  zoo1:     
    image: 'bitnami/zookeeper:3.7.0'        
    container_name: zookeeper     
    ports:       
      - "2181:2181"     
    environment:       
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ./bitnami/zookeeper:/bitnami/zookeeper

  kafka:
    image: 'bitnami/kafka:2.8.0'
    container_name: kafka
    ports:
      - "9093:9093"
    expose:
      - "9093"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zoo1:2181
      - KAFKA_CREATE_TOPICS="kafka_capstone_event_bus:1:1"
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zoo1
    volumes:
      - ./bitnami/kafka:/bitnami/kafka

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka


  neo4j:
    image: neo4j:latest
    restart: always
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      NEO4J_AUTH: neo4j/strongpassword123
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
      - ./neo4j/import:/var/lib/neo4j/import
      - ./neo4j/plugins:/plugins
    networks:
      - web

  # spark:
  #     image: bitnami/spark:latest
  #     environment:
  #       - SPARK_MODE=master
  #     ports:
  #       - "7077:7077"
  #       - "8080:8080"
  #     networks:
  #       - web

  spark-worker:
      image: bitnami/spark:latest
      environment:
        - SPARK_MODE=worker
        - SPARK_MASTER_URL=spark://spark:7077
      networks:
        - web
      depends_on:
        - spark

networks:
  web:
    driver: bridge
